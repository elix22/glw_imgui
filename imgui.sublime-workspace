{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"SCREE",
				"SCREEN_HEIGHT"
			],
			[
				"m_left",
				"m_left_pressed"
			],
			[
				"vert",
				"vert_rollout"
			],
			[
				"load_",
				"load_rollout"
			],
			[
				"toolbar",
				"toolbar_t"
			],
			[
				"toolb",
				"toolbar_t"
			],
			[
				"tabbed",
				"tabbed_rollouts"
			],
			[
				"TEXT_co",
				"text_color_hot"
			],
			[
				"text_",
				"text_color_hot"
			],
			[
				"text_color",
				"text_color_hot"
			],
			[
				"text_col",
				"text_color_hot"
			],
			[
				"button_c",
				"button_color"
			],
			[
				"text_c",
				"text_color"
			],
			[
				"start",
				"start_control"
			],
			[
				"seri",
				"serialization"
			],
			[
				"container",
				"containter_type"
			],
			[
				"obj",
				"obj_start"
			],
			[
				"serial",
				"serialize_prop"
			],
			[
				"base_props",
				"base_props_current"
			],
			[
				"Ser",
				"serialize"
			],
			[
				"seria",
				"serialize"
			],
			[
				"len",
				"length"
			],
			[
				"strings",
				"stringstream"
			],
			[
				"type",
				"typename"
			]
		]
	},
	"buffers":
	[
		{
			"file": "demo/main.cpp",
			"settings":
			{
				"buffer_size": 6731,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "demo/platform_sdl.cpp",
			"settings":
			{
				"buffer_size": 9402,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "imgui.sublime-project",
			"settings":
			{
				"buffer_size": 959,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/render.cpp",
			"settings":
			{
				"buffer_size": 15246,
				"line_ending": "Windows"
			}
		},
		{
			"file": "demo/platform_sdl.h",
			"settings":
			{
				"buffer_size": 791,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 18 files for \"SDL_WInd\"\n\nC:\\projects\\glw_imgui\\demo\\main.cpp:\n   22  bool            quit = false;\n   23  char            last_char = 0;\n   24: SDL_Window*     gWindow = NULL;\n   25  SDL_GLContext   gContext;\n   26  bool            gRenderQuad = true;\n   ..\n   43      SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);\n   44  \n   45:     gWindow = SDL_CreateWindow(\"SDL Tutorial\", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,\n   46:                                SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN |SDL_WINDOW_RESIZABLE );\n   47      if (gWindow == NULL) {\n   48          printf(\"Window could not be created! SDL Error: %s\\n\", SDL_GetError());\n\n6 matches in 1 file\n\n\nSearching 18 files for \"gScreenSizeLocation\"\n\nC:\\projects\\glw_imgui\\demo\\platform_sdl.cpp:\n   47  GLint  gVertexClrLocation = -1;\n   48  GLint  gVertexTxtLocation = -1;\n   49: GLint  gScreenSizeLocation = -1;\n   50  GLuint vao, vbo;\n   51  \n   ..\n  110  \tgVertexTxtLocation = 2;\n  111  \n  112: \tgScreenSizeLocation = glGetUniformLocation(gProgramID, \"in_screen_size\");\n  113  \n  114  \tcheckError();\n  ...\n  206  \tint w, h;\n  207  \tSDL_GL_GetDrawableSize(gWindow, &w, &h);\n  208: \tglUniform2f(gScreenSizeLocation, (float)w, float(h));\n  209  \n  210  \tcheckError();\n\n3 matches in 1 file\n\n\nSearching 18 files for \"CreateWindow\"\n\nC:\\projects\\glw_imgui\\demo\\main.cpp:\n   43      SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);\n   44  \n   45:     gWindow = SDL_CreateWindow(\"SDL Tutorial\", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,\n   46                                 SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN |SDL_WINDOW_RESIZABLE );\n   47      if (gWindow == NULL) {\n\n1 match in 1 file\n\n\nSearching 18 files for \"SDL_SetVideo\"\n\n0 matches\n\nSearching 18 files for \"1024\"\n\nC:\\projects\\glw_imgui\\demo\\main.cpp:\n   10  #include \"io.h\"\n   11  \n   12: const int SCREEN_WIDTH = 1024;\n   13  const int SCREEN_HEIGHT = 768;\n   14  \n\nC:\\projects\\glw_imgui\\include\\render_queue.h:\n   25  namespace imgui {\n   26  \n   27: static const unsigned GFXCMD_QUEUE_SIZE = 1024;\n   28  static const unsigned TEXT_POOL_SIZE = 8000;\n   29  \n\n2 matches across 2 files\n\n\nSearching 18 files for \"glViewport\"\n\n0 matches\n\nSearching 18 files for \"::row\"\n\nC:\\projects\\glw_imgui\\src\\ui.cpp:\n 1072  \treturn res;\n 1073  }\n 1074: void Ui::row(uint count) {\n 1075  \t// set new widget width\n 1076  \tint remainder = m_row ? (m_rollout_width - m_widget_w) : m_rollout_width;\n\n1 match in 1 file\n\n\nSearching 18 files for \"\tint w, h;\n\tSDL_GetRendererOutputSize(gRenderer, &w, &h);\n\"\n\nC:\\projects\\glw_imgui\\demo\\platform_sdl.cpp:\n  205  \tglEnableVertexAttribArray(gVertexTxtLocation);\n  206  \n  207: \tint w, h;\n  208: \tSDL_GetRendererOutputSize(gRenderer, &w, &h);\n  209: \tglUniform2f(gScreenSizeLocation, (float)w, float(h));\n  210  \tglViewport(0, 0, w, h);\n  211  \n\n1 match in 1 file\n\n\nSearching 18 files for \"&w\"\n\nC:\\projects\\glw_imgui\\demo\\main.cpp:\n  116  \n  117  \tint w, h;\n  118: \tSDL_GL_GetDrawableSize(gWindow, &w, &h);\n  119  \n  120  \tui.begin_frame(w, h, x, h - y, mouse_buttons, -mouse_wheel, last_char);\n\nC:\\projects\\glw_imgui\\demo\\platform_sdl.cpp:\n  206  \n  207  \tint w, h;\n  208: \tSDL_GetRendererOutputSize(gRenderer, &w, &h);\n  209  \tglUniform2f(gScreenSizeLocation, (float)w, float(h));\n  210  \tglViewport(0, 0, w, h);\n\nC:\\projects\\glw_imgui\\src\\render.cpp:\n   97  \n   98  \t// create texture\n   99: \tgWhiteTexture = r->create_texture(1, 1, &white, false);\n  100  \treturn gWhiteTexture != 0;\n  101  }\n\n3 matches across 3 files\n\n\nSearching 18 files for \"createWindo\"\n\nC:\\projects\\glw_imgui\\demo\\main.cpp:\n   45      SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);\n   46  \n   47:     gWindow = SDL_CreateWindow(\"SDL Tutorial\", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,\n   48                                 SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN |SDL_WINDOW_RESIZABLE );\n   49      if (gWindow == NULL) {\n\n1 match in 1 file\n\n\nSearching 18 files for \"project\\\\\"\n\n0 matches\n\nSearching 18 files for \"projects\\\"\n\nE:\\projects\\glw_imgui\\demo\\main.cpp:\n   90  \tui.insert_rollout(vert_rollout, -200, true, root_rollout);\n   91  \n   92: \tui.font(\"C:\\\\projects\\\\glw_imgui\\\\DroidSans.ttf\", 15);\n   93  \n   94:     //if ( save_layout(ui, \"C:\\\\projects\\\\glw_imgui\\\\test.imgui\") )\n   95:     //    if (!load_layout(ui, \"C:\\\\projects\\\\glw_imgui\\\\test.imgui\"))\n   96      //        printf(\"failed to load\");\n   97      return success;\n\n3 matches in 1 file\n\n\nSearching 18 files for \".tt\"\n\nE:\\projects\\glw_imgui\\demo\\main.cpp:\n   90  \tui.insert_rollout(vert_rollout, -200, true, root_rollout);\n   91  \n   92: \tui.font(\"E:\\\\projects\\\\glw_imgui\\\\DroidSans.ttf\", 15);\n   93  \n   94      //if ( save_layout(ui, \"C:\\\\projects\\\\glw_imgui\\\\test.imgui\") )\n\n1 match in 1 file\n\n\nSearching 18 files for \"set_sci\"\n\nE:\\projects\\glw_imgui\\demo\\platform_sdl.cpp:\n  297  \treturn true;\n  298  }\n  299: void RenderSDL::set_scissor(int x, int y, int w, int h, bool set){\n  300  \t// if (set)\n  301  \t// \tglEnable(GL_SCISSOR_TEST);\n\nE:\\projects\\glw_imgui\\demo\\platform_sdl.h:\n   29  \tbool render_mesh(const render_vertex_3d_t* tries, int count, bool b);\n   30  \tvoid set_blend_mode(BlendMode mode);\n   31: \tvoid set_scissor(int x, int y, int w, int h, bool set);\n   32  };\n   33  }\n\nE:\\projects\\glw_imgui\\include\\platform.h:\n   30  \tvirtual bool render_mesh(const render_vertex_3d_t* tries, int count, bool b) = 0;\n   31  \tvirtual void set_blend_mode(BlendMode mode) = 0;\n   32: \tvirtual void set_scissor(int x, int y, int w, int h, bool set) = 0;\n   33  };\n   34  }\n\nE:\\projects\\glw_imgui\\src\\render.cpp:\n  171  \t\t case GFX_CMD_SCISSOR:\n  172  \t\t \tif (cmd->flags) {\n  173: \t\t \t\tr->set_scissor(cmd->rect.x, (cmd->rect.y),\n  174  \t\t \t\t\t\t\t   cmd->rect.w, cmd->rect.h, true);\n  175  \t\t \t}\n  176  \t\t \telse\n  177: \t\t\t\tr->set_scissor(0,0,0,0,false);\n  178  \t\t \tbreak;\n  179  \n\n5 matches across 4 files\n\n\nSearching 21 files for \"createWindow\"\n\n/Users/sumygini/dev/glw_imgui/demo/main.cpp:\n   45      SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);\n   46  \n   47:     gWindow = SDL_CreateWindow(\"SDL Tutorial\", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,\n   48                                 SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN |\n   49                                 SDL_WINDOW_RESIZABLE|SDL_WINDOW_ALLOW_HIGHDPI );\n\n1 match in 1 file\n\n\nSearching 21 files for \"Renderer\"\n\n/Users/sumygini/dev/glw_imgui/demo/main.cpp:\n   24  SDL_Window*     gWindow = NULL;\n   25  SDL_GLContext   gContext;\n   26: SDL_Renderer*   gRenderer;\n   27  bool            gRenderQuad = true;\n   28  int\t\t\t\tmouse_wheel = 0;\n   ..\n   33  Ui        ui(gPlatform);\n   34  Rollout  *root_rollout, *rollout, *vert_rollout;\n   35: RenderSDL renderer;\n   36  \n   37  bool init() {\n   ..\n   59      }\n   60  \n   61: \tgRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED);\n   62  \n   63      //Initialize GLEW\n   ..\n   79          success = false;\n   80      }\n   81: \tui.render_init(&renderer);\n   82  \n   83  \troot_rollout = ui.create_rollout(\"root\", ROLLOUT_HOLLOW | WND_STYLE);\n   ..\n  100  bool initGL() {\n  101      glClearColor(0.f, 0.f, 0.f, 1.f);\n  102:     return renderer.create();\n  103  }\n  104  void handleKeys(unsigned char key) {\n  ...\n  117  \n  118      int w, h;\n  119:     SDL_GetRendererOutputSize(gRenderer, &w, &h);\n  120  \n  121  \tui.begin_frame(w, h, x, h - y, mouse_buttons, -mouse_wheel, last_char);\n  ...\n  202  \tglClearColor(0.5, 0.5, 0.5, 1.0);\n  203      glClear(GL_COLOR_BUFFER_BIT);\n  204:     ui.render_draw(&renderer, &ui, true);\n  205  }\n  206  \n\n/Users/sumygini/dev/glw_imgui/demo/platform_sdl.cpp:\n   15  \n   16  extern SDL_Window*   gWindow;\n   17: extern SDL_Renderer* gRenderer;\n   18  \n   19  namespace imgui {\n   ..\n  206  \n  207  \tint w, h;\n  208: \tSDL_GetRendererOutputSize(gRenderer, &w, &h);\n  209  \tglUniform2f(gScreenSizeLocation, (float)w, float(h));\n  210  \tglViewport(0, 0, w, h);\n\n/Users/sumygini/dev/glw_imgui/demo/platform_sdl.h:\n    2  // Copyright (C) 2016 Iakov Sumygin - BSD license\n    3  \n    4: #ifndef _RENDERER_SDL_H_\n    5: #define _RENDERER_SDL_H_\n    6  \n    7  #include \"platform.h\"\n    .\n   20  };\n   21  \n   22: class RenderSDL: public IRenderer{\n   23  public:\n   24  \tbool create();\n   ..\n   32  };\n   33  }\n   34: #endif //_RENDERER_SDL_H_\n   35  \n\n/Users/sumygini/dev/glw_imgui/include/platform.h:\n   21  };\n   22  \n   23: class IRenderer{\n   24  public:\n   25  \tvirtual\tbool create() = 0;\n\n/Users/sumygini/dev/glw_imgui/include/ui.h:\n   12  namespace imgui {\n   13  \n   14: class IRenderer;\n   15  class IPlatform;\n   16  \n   ..\n  204  \n  205  \t// render\n  206: \tbool render_init(IRenderer* r);\n  207: \tvoid render_destroy(IRenderer* r);\n  208: \tvoid render_draw(IRenderer* r, Ui* ui, bool transparency);\n  209  \n  210  private:\n\n/Users/sumygini/dev/glw_imgui/src/render.cpp:\n   56  static const float MAX_UI_DEPTH = 256.0f; // to match z buffer depth\n   57  \n   58: #define RENDERER_ARGB(a, r, g, b)                                                                  \\\n   59  \t((unsigned int)((((a)&0xff) << 24) | (((r)&0xff) << 16) | (((g)&0xff) << 8) | ((b)&0xff)))\n   60: #define RENDERER_COLOR_RGBA(r, g, b, a) RENDERER_ARGB(a, r, g, b)\n   61  #define COLOR_TO_D3D(c)                                                                            \\\n   62: \tRENDERER_COLOR_RGBA((c & 0xff), ((c >> 8) & 0xff), ((c >> 16) & 0xff), ((c >> 24) & 0xff))\n   63  \n   64: static void render_text(IRenderer* r, float x, float y, float w, float h, const char* text,\n   65  \t\t\t\t\t\tint align, unsigned int col);\n   66: static unsigned int load_font(IRenderer* r, const char* path, float font_height);\n   67  inline void set(render_vertex_3d_t* v, float x, float y, unsigned int col) {\n   68  \tv->x = x;\n   ..\n   80  }\n   81  \n   82: static void draw_rect(IRenderer* r, float x, float y, float w, float h, float fth,\n   83  \t\t\t\t\t  unsigned int col);\n   84: static void draw_rounded_rect(IRenderer* render, float x, float y, float w, float h, float r,\n   85  \t\t\t\t\t\t\t  float fth, unsigned int col);\n   86: static void render_mesh(IRenderer* renderer, const float* coords, float txt_shift_x,\n   87  \t\t\t\t\t\tfloat txt_shift_y, float txt_scale_x, float txt_scale_y, unsigned numCoords,\n   88  \t\t\t\t\t\tfloat r, unsigned int col);\n   89: bool Ui::render_init(IRenderer* r) {\n   90  \tfor (unsigned i = 0; i < CIRCLE_VERTS; ++i) {\n   91  \t\tfloat a = (float)i / (float)CIRCLE_VERTS * (float)M_PI * 2;\n   ..\n  100  \treturn gWhiteTexture != 0;\n  101  }\n  102: void Ui::render_destroy(IRenderer* r) {\n  103  \t// g_current_texture.reset();\n  104  \t// g_current_font.reset();\n  105  }\n  106: void Ui::render_draw(IRenderer* r, Ui* ui, bool transparency) {\n  107  \tr->begin();\n  108  \n  ...\n  206  \n  207  // simple drawing, without any alpha blending\n  208: static void render_quads(IRenderer* r, const float* coords, float txt_shift_x, float txt_shift_y,\n  209  \t\t\t\t\t\t float txt_scale_x, float txt_scale_y, unsigned numCoords,\n  210  \t\t\t\t\t\t unsigned int col) {\n  ...\n  225  \tr->render_mesh(new_coords, k, true);\n  226  }\n  227: static void render_mesh(IRenderer* renderer, const float* coords, float txt_shift_x,\n  228  \t\t\t\t\t\tfloat txt_shift_y, float txt_scale_x, float txt_scale_y, unsigned numCoords,\n  229  \t\t\t\t\t\tfloat r, unsigned int col) {\n  ...\n  288  \t\tnew_coords[k].clr = col;\n  289  \t}\n  290: \trenderer->render_mesh(new_coords, k, true);\n  291  }\n  292  \n  293: static void draw_rect(IRenderer* r, float x, float y, float w, float h, float fth,\n  294  \t\t\t\t\t  unsigned int col) {\n  295  \tfloat verts[4 * 2] = {\n  ...\n  298  \trender_quads(r, verts, x, y, w, h, 4, col);\n  299  }\n  300: static void draw_ellipse(IRenderer* r, float x, float y, float w, float h, float fth,\n  301  \t\t\t\t\t\t unsigned int col) {\n  302  \tfloat\t\t verts[CIRCLE_VERTS * 2];\n  ...\n  309  \trender_mesh(r, verts, x, y, w, h, CIRCLE_VERTS, fth, col);\n  310  }\n  311: static void draw_rounded_rect(IRenderer* render, float x, float y, float w, float h, float r,\n  312  \t\t\t\t\t\t\t  float fth, unsigned int col) {\n  313  \tconst unsigned n = CIRCLE_VERTS / 4;\n  ...\n  335  \trender_mesh(render, verts, x, y, w, h, (n + 1) * 4, fth, col);\n  336  }\n  337: static void draw_line(IRenderer* render, float x0, float y0, float x1, float y1, float r, float fth,\n  338  \t\t\t\t\t  unsigned int col) {\n  339  \tfloat dx = x1 - x0;\n  ...\n  377  unsigned char ttf_buffer[1 << 20];\n  378  \n  379: static unsigned int load_font(IRenderer* r, const char* path, float font_height) {\n  380  \t// Load font.\n  381  \tvoid* bmap = malloc(512 * 512);\n  ...\n  434  \treturn len;\n  435  }\n  436: static void render_text(IRenderer* r, float x, float y, float w, float h, const char* text,\n  437  \t\t\t\t\t\tint align, unsigned int col) {\n  438  \tif (!text)\n\n47 matches across 6 files\n",
			"settings":
			{
				"buffer_size": 12760,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/ui.cpp",
			"settings":
			{
				"buffer_size": 46656,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "imgui",
	"build_system_choices":
	[
		[
			[
				[
					"imgui",
					""
				],
				[
					"imgui",
					"run"
				]
			],
			[
				"imgui",
				"run"
			]
		]
	],
	"build_varint": "run",
	"command_palette":
	{
		"height": 375.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"CLAN",
				"Clang Format: Format Selection"
			],
			[
				"cmake",
				"Set Syntax: CMake"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"",
				"Clang Format: Format Selection"
			],
			[
				"clan",
				"Clang Format: Format Selection"
			],
			[
				"clangf",
				"Clang Format: Format Selection"
			],
			[
				"di",
				"Git: Diff"
			],
			[
				"git diff",
				"Git: Diff"
			],
			[
				"diff",
				"Git: Diff"
			],
			[
				"log",
				"Git: Log"
			],
			[
				"forma",
				"Clang Format: Format Selection"
			],
			[
				"status",
				"Git: Status"
			],
			[
				"form",
				"Clang Format: Format Selection"
			],
			[
				"format",
				"Clang Format: Format Selection"
			],
			[
				"brows",
				"Preferences: Browse Packages"
			],
			[
				"browse",
				"Preferences: Browse Packages"
			],
			[
				"sta",
				"Stackoverflow: Search from Input"
			],
			[
				"stac",
				"Stackoverflow: Search from Input"
			],
			[
				"git di",
				"Git: Diff"
			],
			[
				"checkou",
				"Git: Checkout"
			],
			[
				"menu",
				"View: Toggle Menu"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"projects",
				"Project: Close"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Remove Package"
			],
			[
				"font",
				"Preferences: Package Control Settings – User"
			],
			[
				"ctags",
				"CTags: Show Symbols (all)"
			],
			[
				"clang",
				"Clang Format: Format Selection"
			],
			[
				"clanf",
				"Clang Format: Select Style"
			]
		],
		"width": 435.0
	},
	"console":
	{
		"height": 167.0,
		"history":
		[
			"sublime.log_commands(False)",
			"sublime.log_commands(True)",
			"sublime.log_commands(true)",
			"c:\\Apps\\ctags.exe",
			"/c/Apps/ctags.exe",
			"\\c\\Apps\\ctags.exe",
			"c:\\Apps\\ctags.exe",
			"ctags.exe",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"sublime.log_commands(True)",
			"cd c:\\\\projects\\\\glow\\\\build\\\\cmake",
			"cd c:\\projects\\glow\\build\\cmake",
			"cd c:/projects/glow/build/cmake"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/sumygini/dev/glw_imgui",
		"/Users/sumygini/dev/glw_imgui/build/bin",
		"/Users/sumygini/dev/glw_imgui/build/demo",
		"/Users/sumygini/dev/glw_imgui/build/lib",
		"/Users/sumygini/dev/glw_imgui/demo"
	],
	"file_history":
	[
		"/C/projects/glw_imgui/src/ui.cpp",
		"/C/projects/glw_imgui/demo/CMakeLists.txt",
		"/C/projects/glw_imgui/demo/platform_sdl.cpp",
		"/C/projects/glw_imgui/demo/platform_sdl.h",
		"/C/projects/glw_imgui/include/platform.h",
		"/C/projects/glw_imgui/imgui.sublime-project",
		"/C/projects/glw_imgui/src/rollout.cpp",
		"/C/projects/glw_imgui/demo/main.cpp",
		"/C/projects/glw_imgui/include/ui.h",
		"/C/projects/glw_imgui/CMakeLists.txt",
		"/C/projects/glw_imgui/demo/renderer_sdl.cpp",
		"/C/projects/glw_imgui/demo/thirdparty/SDL2/include/SDL_test_common.h",
		"/C/projects/glw_imgui/src/render.cpp",
		"/C/projects/glw_imgui/test.imgui",
		"/C/projects/glw_imgui/include/toolbars.h",
		"/C/projects/glw_imgui/src/io.cpp",
		"/C/projects/glw_imgui/src/toolbars.cpp",
		"/C/projects/imgui/sdl/CMakeLists.txt",
		"/C/projects/imgui/renderer_sdl.cpp",
		"/C/projects/imgui/renderer_sdl.h",
		"/E/projects/imgui/sdl/CMakeLists.txt",
		"/E/projects/imgui/ui.cpp",
		"/E/projects/imgui/irenderer.h",
		"/E/projects/imgui/render.h",
		"/E/projects/imgui/render_queue.cpp",
		"/E/projects/imgui/render_queue.h",
		"/E/projects/imgui/rollout.cpp",
		"/E/projects/imgui/rollout.h",
		"/E/projects/imgui/renderer_sdl.cpp",
		"/E/projects/imgui/io.cpp",
		"/E/projects/imgui/io.h",
		"/E/projects/imgui/ui.h",
		"/E/projects/imgui/toolbars.h",
		"/E/projects/imgui/toolbars.cpp",
		"/E/projects/imgui/render.cpp",
		"/C/projects/imgui/rolllout.cpp",
		"/C/projects/imgui/rollout.cpp",
		"/C/projects/imgui/io.cpp",
		"/C/projects/imgui/imgui.cpp",
		"/C/projects/imgui/ui.cpp",
		"/C/projects/imgui/toolbars.h",
		"/C/projects/imgui/CMakeLists.txt",
		"/C/projects/imgui/imgui.h",
		"/C/projects/imgui/toolbars.cpp",
		"/C/projects/imgui/rollout.h",
		"/C/projects/imgui/render_queue.cpp",
		"/C/projects/imgui/render_queue.h",
		"/C/projects/imgui/io.h",
		"/C/projects/imgui/render.cpp",
		"/C/projects/imgui/render.h",
		"/C/projects/imgui/imgui.sublime-project",
		"/C/Users/sumygini/dev/ignitiondepooverrides/overrides.json",
		"/C/projects/imgui/sound.h",
		"/C/projects/imgui/sound.cpp",
		"/C/projects/imgui/.clang-format",
		"/C/projects/glow/source/kernel/job_manager_boost.cpp",
		"/C/projects/glow/source/core/platform/platform_windows.cpp",
		"/C/projects/glow/include/types/type_material.h",
		"/C/projects/glow/include/types/type_landscape.h",
		"/C/projects/glow/source/core/serialization/glw_json.h",
		"/C/projects/glow/include/types/type_light.h",
		"/c/projects/glow/source/core/serialization/glw_json.h",
		"/C/projects/glow/source/core/script/script_lua.cpp",
		"/C/projects/glow/source/core/core/core.cpp",
		"/C/projects/glow/source/editor/importer_fbx.cpp",
		"/c/projects/glow/include/kernel/mathematics.h",
		"/C/projects/glow/source/core/serialization/engine_json.cpp",
		"/C/projects/glow/source/core/serialization/engine_json.h",
		"/C/projects/glow/include/kernel/serialization.h",
		"/c/projects/glow/include/kernel/type_base.h",
		"/c/projects/glow/source/editor/property_renderer.h",
		"/C/projects/glow/include/types/type_model.h",
		"/C/projects/glow/source/core/manager/manager_cinematic.cpp",
		"/C/projects/glow/include/types/type_trigger.h",
		"/C/projects/glow/include/kernel/params.h",
		"/C/projects/glow/include/types/type_scene.h",
		"/C/projects/glow/include/types/type_sound.h",
		"/C/projects/glow/include/types/type_physics.h",
		"/C/projects/glow/include/types/type_particle.h",
		"/C/projects/glow/include/types/type_entity.h",
		"/C/projects/glow/include/types/type_ai.h",
		"/C/projects/glow/targets/Debug/test2.json",
		"/C/projects/glow/build/CMakeLists.txt",
		"/C/projects/glow/source/core/serialization/json.cpp",
		"/C/projects/glow/source/core/serialization/json_engine_types.cpp",
		"/c/projects/glow/source/core/serialization/json_engine_types.h",
		"/C/projects/glow/source/core/serialization/json.h",
		"/C/projects/glow/targets/Debug/village_data/test.json",
		"/C/projects/glow/patch",
		"/C/projects/glow/targets/Debug/test.json",
		"/C/Users/sumygini/dev/deployment/platform/ps4/sce_sys/changeinfo/changeinfo.xml",
		"/C/Users/sumygini/Dropbox/temp/changeinfo.xml",
		"/C/projects/glow/source/core/serialization/json_types.h",
		"/C/projects/glow/targets/Debug/village_data/config.json",
		"/C/projects/glow/targets/Debug/village_data/package/types/ai.types",
		"/C/projects/glow/source/core/serialization/json_engine_types.h",
		"/C/projects/glow/source/core/serialization/types_serialization.h",
		"/C/projects/glow/json_engine_types.h",
		"/C/projects/glow/test",
		"/C/projects/glow/source/core/serialisation/json.cpp",
		"/C/projects/glow/source/core/serialisation/json.h",
		"/C/projects/glow/source/core/serialisation/json_types.h",
		"/C/projects/glow/source/shader/renderer_base.cpp",
		"/C/projects/glow/projects/voxel_game/game_player.cpp",
		"/C/projects/glow/source/entities/entity/entity_movable.cpp",
		"/C/projects/glow/source/editor/core.cpp",
		"/C/projects/glow/source/render_directx/dx_nvidia_game_works.cpp",
		"/C/projects/glow/source/editor/editor_tools.cpp",
		"/C/projects/glow/source/editor/entity_factory.cpp",
		"/C/projects/glow/source/editor/gizmo.cpp",
		"/C/projects/glow/source/editor/ui_entity_render.cpp",
		"/C/projects/glow/source/shader/deferred_shader.cpp",
		"/C/projects/glow/source/shader/dynamic_shader.cpp",
		"/C/projects/glow/source/shader/manager_material.cpp",
		"/C/projects/glow/source/shader/lightmap_shader.cpp",
		"/C/projects/glow/source/shader/manager_lighting.cpp",
		"/C/projects/glow/source/shader/manager_oculus.cpp",
		"/C/projects/glow/source/shader/view.cpp",
		"/C/projects/glow/source/shader/view_entity/light_sun.cpp",
		"/C/projects/glow/source/shader/view_entity/tree_particles.cpp",
		"/C/projects/glow/source/shader/view_entity/light.cpp",
		"/C/projects/glow/source/shader/view_entity/light_index.cpp",
		"/C/projects/glow/source/shader/view_entity/landscape.cpp",
		"/C/projects/glow/projects/mercury/editor.cpp",
		"/C/projects/glow/projects/mercury/environment.cpp",
		"/C/projects/glow/projects/pied_piper/app.cpp",
		"/C/projects/glow/projects/sample/sample.cpp",
		"/C/projects/glow/projects/space_sample/sample.cpp"
	],
	"find":
	{
		"height": 46.0
	},
	"find_in_files":
	{
		"height": 117.0,
		"where_history":
		[
			"",
			"<open files>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Renderer",
			"createWindow",
			"set_sci",
			".tt",
			"projects\\",
			"project\\\\",
			"createWindo",
			"&w",
			"\tint w, h;\n\tSDL_GetRendererOutputSize(gRenderer, &w, &h);\n",
			"m_widget_w",
			"::row",
			"glViewport",
			"1024",
			"SDL_SetVideo",
			"gContext",
			"CreateWindow",
			"gScreenSizeLocation",
			"SDL_WInd",
			"SDL_Render",
			"compile_shader",
			"var_color",
			"in_texcoord",
			"\"in_color",
			"m_left_pressed",
			"set_cursor(",
			"capture",
			"render_destroy",
			"\"vert\"",
			"rollout_move",
			"move_",
			"value 1",
			"vert_rollout",
			"ADD_DEFINITION",
			"unsage",
			"vert_rollout",
			"640",
			"m_key",
			"last_char",
			"handleKeys",
			"button_colla",
			"};\n",
			"void ",
			"bool ",
			"bool",
			"main",
			"rollouts_t",
			"toolbar_t",
			"rollouts_t",
			"m_rollouts",
			"rollouts_t",
			"_t",
			"rollouts_t",
			"toolbar_t",
			"Toolbar",
			"ttf",
			"ttg",
			"open",
			"render_quads",
			"draw_rect",
			"drawSimple_polygons",
			"ADD_LIBRARY",
			"new_coords",
			"::create_rollout(",
			"create_rollout",
			"create_rollout(",
			"m_rollouts.",
			"detach_tabbed_rollout",
			"FLOATING_ROLLOUT_DEPTH",
			"visit_rollout_node",
			"rollouts_t",
			"visit_rollout_node",
			"m_rollouts",
			"tabs",
			"visit_rollout_node",
			"tabs",
			"begin_rollout(",
			"tabs",
			"json::",
			"save_object_to_file",
			"load_object_from_file",
			"tabbed_rollouts",
			"save_toolbar",
			"tabbed_rollouts",
			"tabbed_roll",
			"tabbed_rollouts",
			"m_focused_rollout_id",
			"m_dragged_rollout_id",
			"idpr",
			"m_dragged_rollout_id",
			"m_rollouts",
			"RolloutMap",
			"m_rollouts",
			"int id",
			"insert_toolbar",
			"g_scrollBottom",
			"g_scroll_top",
			"g_scrollTop",
			"g_insideScrollArea",
			"g_scrollId",
			"g_focus_bottom\ng_focus_bottom\ng_focus_bottom\ng_focus_bottom",
			"g_focusBottom",
			"g_focusTop",
			"g_scrollVal",
			"g_scrollAreaTop",
			"g_scrollRight",
			"tabbed_rollouts",
			"CHECK_ITEM_RECT",
			"start_control(enabled, enabled, ",
			"start_control",
			"start_control(",
			"bool over",
			"edit_color",
			"color",
			"BUTTON_COLOR_ACTIVE",
			"button_color",
			"m_colors[BUTTON_COLOR_ACTIVE]",
			"button_color",
			"m_colors[BUTTON_COLOR_ACTIVE]",
			"is_item_hot(id)",
			"start_control",
			"unsigned int",
			"toolbar_t",
			"text_color",
			"m_colors[TEXT_COLOR_HOT]",
			"unsigned int",
			"start_control",
			"buttoncollapse",
			"widget_"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"Rollouts",
			"Toolbar",
			"Rollouts",
			"Toolbar",
			"",
			"tabs",
			"rollouts_t",
			"Rollout* r",
			"insert_rollout",
			"m_scroll_bottom",
			"m_scroll_top",
			"g_scroll_top",
			"m_inside_scroll_area",
			"m_scroll_id",
			"m_focus_bottom\nm_scroll_id",
			"m_scroll_id\ng_focus_bottom",
			"m_focus_bottom\ng_focus_bottom",
			"g_focus_bottom",
			"m_focus_top",
			"m_scroll_val",
			"m_scroll_area_top",
			"m_scroll_right",
			"start_control(enabled, ",
			"uint",
			"button_collapse",
			"double_left_released",
			"detach_tabbed_rollout",
			"is_item_focused",
			"m_\\L$1_\\L$2",
			"m_\\L$1\\L$2",
			"m_/L$1_/L$2",
			"nullptr",
			"add_",
			"search_rollout_node",
			"r->options",
			"new",
			"new ",
			"m_text_pool",
			"m_text_pool_size",
			"",
			"r.options",
			"m_\\L$1_\\L$2\\L$3_\\L$4",
			"m_\\L$1_\\L$2_\\L$3\\L$4",
			"m_rollout_\\L$1",
			"m_padding_\\L$1",
			"m_rollout_last",
			"m_widget_id",
			"m_area_id",
			"m_rollout_left",
			"m_rollout_left\nm_rollout_left",
			"m_rollout_left\n",
			"m_rollout_width",
			"m_left_pressed",
			"system_button",
			"",
			"m_queue",
			"m_size",
			"RenderQueue::add_",
			"m_rqueue.add_",
			"m_rqueue.",
			"m_target_rollout",
			"m_target_side",
			"m_is_hot",
			"m_key",
			"m_is_active",
			"m_edit_buffer_id",
			"m_edit_buffer",
			"m_search_next_focus",
			"m_options",
			"m_is_hot",
			"m_left_released",
			"m_is_active",
			"m_left_pressed",
			"left_pressed",
			"m_hot_to_be",
			"m_went_active",
			"m_wentActive",
			"m_dragged_rollout_id",
			"m_double_left_released",
			"m_left_released",
			"m_inside_current_scroll",
			"inside_current_scroll",
			"m_toolbar_root",
			"toolbar_root",
			"delete ",
			"delete[] ",
			"m_",
			", m_",
			", bool ",
			"",
			"div_drag",
			"frect",
			"ColorScheme",
			"frect",
			"",
			"Ui::",
			"m_focused_rollout_id",
			"",
			"on_render_finished",
			"draw_rounded_rect",
			"visit_rollout_node",
			"rollout_move_rect",
			"bool Ui::\\L$1(",
			"system_drag",
			"system_tab",
			"bool Ui::\\L$1(",
			"bool \\L$1(",
			"bool \\$1(",
			"is_item_focused",
			"is_item_hot",
			"is_item_active",
			"add_gfx_cmd_",
			"bool ",
			"item_dropped",
			"\\L$1(",
			"add_gfx_",
			"",
			"void ",
			"bool Ui::",
			"void Ui::",
			"",
			"m_",
			", m_",
			"m_",
			"get_render_queue_\\L$1",
			"get_render_queue\\L$1",
			"get_"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "demo/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6731,
						"regions":
						{
						},
						"selection":
						[
							[
								1290,
								1314
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 729.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "demo/platform_sdl.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9402,
						"regions":
						{
						},
						"selection":
						[
							[
								1866,
								1866
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2221.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "imgui.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 959,
						"regions":
						{
						},
						"selection":
						[
							[
								783,
								783
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 32.0,
						"translation.y": 538.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/render.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15246,
						"regions":
						{
						},
						"selection":
						[
							[
								3744,
								3744
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1812.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "demo/platform_sdl.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 791,
						"regions":
						{
						},
						"selection":
						[
							[
								759,
								759
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12760,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										154,
										162
									],
									[
										385,
										393
									],
									[
										410,
										418
									],
									[
										502,
										510
									],
									[
										522,
										530
									],
									[
										540,
										548
									],
									[
										891,
										910
									],
									[
										1003,
										1022
									],
									[
										1200,
										1219
									],
									[
										1459,
										1471
									],
									[
										1903,
										1907
									],
									[
										2084,
										2088
									],
									[
										2335,
										2340
									],
									[
										2690,
										2762
									],
									[
										3010,
										3012
									],
									[
										3224,
										3226
									],
									[
										3448,
										3450
									],
									[
										3699,
										3710
									],
									[
										4178,
										4187
									],
									[
										4267,
										4276
									],
									[
										4346,
										4355
									],
									[
										4671,
										4674
									],
									[
										4919,
										4926
									],
									[
										5209,
										5216
									],
									[
										5490,
										5497
									],
									[
										5679,
										5686
									],
									[
										5813,
										5820
									],
									[
										6067,
										6079
									],
									[
										6523,
										6531
									],
									[
										6536,
										6544
									],
									[
										6731,
										6739
									],
									[
										6806,
										6814
									],
									[
										6827,
										6835
									],
									[
										6853,
										6861
									],
									[
										6988,
										6996
									],
									[
										7177,
										7185
									],
									[
										7302,
										7310
									],
									[
										7322,
										7330
									],
									[
										7545,
										7553
									],
									[
										7701,
										7709
									],
									[
										7712,
										7720
									],
									[
										7802,
										7810
									],
									[
										7822,
										7830
									],
									[
										8068,
										8076
									],
									[
										8100,
										8108
									],
									[
										8209,
										8217
									],
									[
										8299,
										8307
									],
									[
										8406,
										8414
									],
									[
										8558,
										8566
									],
									[
										8658,
										8666
									],
									[
										8701,
										8709
									],
									[
										8741,
										8749
									],
									[
										8952,
										8960
									],
									[
										9159,
										9167
									],
									[
										9191,
										9199
									],
									[
										9333,
										9341
									],
									[
										9464,
										9472
									],
									[
										9612,
										9620
									],
									[
										9818,
										9826
									],
									[
										9949,
										9957
									],
									[
										10090,
										10098
									],
									[
										10100,
										10108
									],
									[
										10310,
										10318
									],
									[
										10530,
										10538
									],
									[
										10656,
										10664
									],
									[
										10826,
										10834
									],
									[
										11096,
										11104
									],
									[
										11106,
										11114
									],
									[
										11346,
										11354
									],
									[
										11437,
										11445
									],
									[
										11662,
										11670
									],
									[
										11917,
										11925
									],
									[
										12188,
										12196
									],
									[
										12422,
										12430
									],
									[
										12603,
										12611
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								6360,
								6360
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 16,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4465.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/ui.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 46656,
						"regions":
						{
						},
						"selection":
						[
							[
								30859,
								30859
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 26385.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 46.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 139.0
	},
	"output.find_results":
	{
		"height": 157.0
	},
	"pinned_build_system": "imgui",
	"project": "imgui.sublime-project",
	"replace":
	{
		"height": 83.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"glw_json",
				"source\\core\\serialization\\glw_json.h"
			],
			[
				"engine_j",
				"source\\core\\serialization\\engine_json.cpp"
			],
			[
				"serializ",
				"include\\kernel\\serialization.h"
			],
			[
				"engine_json",
				"source\\core\\serialization\\engine_json.h"
			],
			[
				"core.cpp",
				"source\\core\\core\\core.cpp"
			],
			[
				"json",
				"source\\core\\serialization\\json.h"
			],
			[
				"type_ai",
				"include\\types\\type_ai.h"
			],
			[
				"params.h",
				"include\\kernel\\params.h"
			],
			[
				"params",
				"include\\kernel\\params.h"
			],
			[
				"type_a",
				"include\\types\\type_ai.h"
			],
			[
				"params.",
				"include\\kernel\\params.h"
			],
			[
				"cmakel",
				"build\\CMakeLists.txt"
			],
			[
				"json.cpp",
				"source\\core\\serialization\\json.cpp"
			],
			[
				"cscriptl",
				"source\\core\\script\\script_lua.cpp"
			],
			[
				"core.",
				"source\\ai\\core.cpp"
			],
			[
				"game_para",
				"projects\\voxel_game\\game_params.h"
			],
			[
				"param",
				"source\\kernel\\params.cpp"
			],
			[
				"game_param",
				"projects\\voxel_game\\game_params.h"
			],
			[
				"par",
				"include\\kernel\\params.h"
			],
			[
				"types.",
				"include\\kernel\\types.h"
			],
			[
				"type_ser",
				"source\\core\\type_serialization.h"
			],
			[
				"membu",
				"source\\kernel\\memory_buffer.h"
			],
			[
				"type_ini",
				"source\\core\\type_serialization.h"
			],
			[
				"type_seri",
				"source\\core\\type_serialization.h"
			],
			[
				"scene.cpp",
				"source\\core\\manager\\manager_scene.cpp"
			],
			[
				"scene",
				"include\\types\\type_scene.h"
			],
			[
				"cmakelists",
				"projects\\voxel_game\\CMakeLists.txt"
			],
			[
				"types.h",
				"include\\kernel\\types.h"
			],
			[
				"quad_tr",
				"include\\kernel\\quad_tree.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 625.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\sumygini\\dev\\ignition-ps4.sublime-project"
			]
		],
		"width": 475.0
	},
	"select_symbol":
	{
		"height": 469.0,
		"last_filter": "vec3",
		"selected_items":
		[
			[
				"vec3",
				"vec3"
			],
			[
				"json_load",
				"json_load_types"
			],
			[
				"json_save",
				"json_save_types"
			],
			[
				"json_",
				"json_load_types"
			],
			[
				"type_base",
				"type_base_t"
			],
			[
				"JSON",
				"JSON_SaveTypes"
			]
		],
		"width": 1224.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 195.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
